//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ..\parser\JsonLT.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace JsonLT.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class JsonLTParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, TRUE=12, FALSE=13, NULL=14, STRING=15, NUMBER=16, WS=17, 
		ROOT=18, CURRENT=19, TAG=20, NODENAME=21, OPERATOR=22;
	public const int
		RULE_json = 0, RULE_obj = 1, RULE_member = 2, RULE_array = 3, RULE_element = 4, 
		RULE_path = 5, RULE_subpath = 6, RULE_condition = 7, RULE_bool = 8;
	public static readonly string[] ruleNames = {
		"json", "obj", "member", "array", "element", "path", "subpath", "condition", 
		"bool"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "','", "'}'", "':'", "'['", "']'", "'.'", "'[''", "'']'", 
		"'[?('", "')]'", "'true'", "'false'", "'null'", null, null, null, "'$'", 
		"'@'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"TRUE", "FALSE", "NULL", "STRING", "NUMBER", "WS", "ROOT", "CURRENT", 
		"TAG", "NODENAME", "OPERATOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JsonLT.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JsonLTParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JsonLTParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JsonLTParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class JsonContext : ParserRuleContext {
		public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		public JsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterJson(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitJson(this);
		}
	}

	[RuleVersion(0)]
	public JsonContext json() {
		JsonContext _localctx = new JsonContext(Context, State);
		EnterRule(_localctx, 0, RULE_json);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; element();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterObj(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitObj(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 2, RULE_obj);
		int _la;
		try {
			State = 33;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 20; Match(T__0);
				State = 21; member();
				State = 26;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 22; Match(T__1);
					State = 23; member();
					}
					}
					State = 28;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 29; Match(T__2);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 31; Match(T__0);
				State = 32; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsonLTParser.STRING, 0); }
		public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitMember(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 4, RULE_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35; Match(STRING);
			State = 36; Match(T__3);
			State = 37; element();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 6, RULE_array);
		int _la;
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 39; Match(T__4);
				State = 40; element();
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 41; Match(T__1);
					State = 42; element();
					}
					}
					State = 47;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 48; Match(T__5);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 50; Match(T__4);
				State = 51; Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsonLTParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(JsonLTParser.NUMBER, 0); }
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ITerminalNode TRUE() { return GetToken(JsonLTParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(JsonLTParser.FALSE, 0); }
		public ITerminalNode NULL() { return GetToken(JsonLTParser.NULL, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 8, RULE_element);
		try {
			State = 62;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54; Match(STRING);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 55; Match(NUMBER);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 3);
				{
				State = 56; obj();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 57; array();
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 58; Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 59; Match(FALSE);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 60; Match(NULL);
				}
				break;
			case ROOT:
			case CURRENT:
			case TAG:
				EnterOuterAlt(_localctx, 8);
				{
				State = 61; path();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathContext : ParserRuleContext {
		public ITerminalNode ROOT() { return GetToken(JsonLTParser.ROOT, 0); }
		public SubpathContext subpath() {
			return GetRuleContext<SubpathContext>(0);
		}
		public ITerminalNode CURRENT() { return GetToken(JsonLTParser.CURRENT, 0); }
		public ITerminalNode TAG() { return GetToken(JsonLTParser.TAG, 0); }
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterPath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitPath(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		PathContext _localctx = new PathContext(Context, State);
		EnterRule(_localctx, 10, RULE_path);
		int _la;
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ROOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64; Match(ROOT);
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__6) | (1L << T__7))) != 0)) {
					{
					State = 65; subpath();
					}
				}

				}
				break;
			case CURRENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 68; Match(CURRENT);
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__6) | (1L << T__7))) != 0)) {
					{
					State = 69; subpath();
					}
				}

				}
				break;
			case TAG:
				EnterOuterAlt(_localctx, 3);
				{
				State = 72; Match(TAG);
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__6) | (1L << T__7))) != 0)) {
					{
					State = 73; subpath();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubpathContext : ParserRuleContext {
		public ITerminalNode NODENAME() { return GetToken(JsonLTParser.NODENAME, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public SubpathContext subpath() {
			return GetRuleContext<SubpathContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(JsonLTParser.NUMBER, 0); }
		public SubpathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpath; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterSubpath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitSubpath(this);
		}
	}

	[RuleVersion(0)]
	public SubpathContext subpath() {
		SubpathContext _localctx = new SubpathContext(Context, State);
		EnterRule(_localctx, 12, RULE_subpath);
		int _la;
		try {
			State = 101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 78; Match(T__6);
				State = 79; Match(NODENAME);
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 80; condition();
					}
				}

				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__6) | (1L << T__7))) != 0)) {
					{
					State = 83; subpath();
					}
				}

				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 86; Match(T__7);
				State = 87; Match(NODENAME);
				State = 88; Match(T__8);
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 89; condition();
					}
				}

				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__6) | (1L << T__7))) != 0)) {
					{
					State = 92; subpath();
					}
				}

				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 95; Match(T__4);
				State = 96; Match(NUMBER);
				State = 97; Match(T__5);
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__6) | (1L << T__7))) != 0)) {
					{
					State = 98; subpath();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 14, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(T__9);
			State = 104; @bool();
			State = 105; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public ITerminalNode OPERATOR() { return GetToken(JsonLTParser.OPERATOR, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 16, RULE_bool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; element();
			State = 108; Match(OPERATOR);
			State = 109; element();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x18', 'r', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'\x1B', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x1E', '\v', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '$', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '.', '\n', 
		'\x5', '\f', '\x5', '\xE', '\x5', '\x31', '\v', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x37', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x41', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x45', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', 'I', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', 'M', '\n', '\a', '\x5', '\a', 'O', '\n', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', 'T', '\n', '\b', '\x3', '\b', '\x5', 
		'\b', 'W', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', ']', '\n', '\b', '\x3', '\b', '\x5', '\b', '`', '\n', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x66', 
		'\n', '\b', '\x5', '\b', 'h', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x2', '\x2', '\v', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x2', '\x2', '\x2', '\x7F', '\x2', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '#', '\x3', '\x2', '\x2', '\x2', '\x6', '%', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\n', '@', '\x3', '\x2', '\x2', '\x2', '\f', 'N', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 'g', '\x3', '\x2', '\x2', '\x2', '\x10', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x12', 'm', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', 
		'\x5', '\n', '\x6', '\x2', '\x15', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x17', '\a', '\x3', '\x2', '\x2', '\x17', '\x1C', '\x5', '\x6', 
		'\x4', '\x2', '\x18', '\x19', '\a', '\x4', '\x2', '\x2', '\x19', '\x1B', 
		'\x5', '\x6', '\x4', '\x2', '\x1A', '\x18', '\x3', '\x2', '\x2', '\x2', 
		'\x1B', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', ' ', '\a', '\x5', '\x2', '\x2', ' ', '$', '\x3', '\x2', '\x2', 
		'\x2', '!', '\"', '\a', '\x3', '\x2', '\x2', '\"', '$', '\a', '\x5', '\x2', 
		'\x2', '#', '\x16', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x5', '\x3', '\x2', '\x2', '\x2', '%', '&', '\a', 
		'\x11', '\x2', '\x2', '&', '\'', '\a', '\x6', '\x2', '\x2', '\'', '(', 
		'\x5', '\n', '\x6', '\x2', '(', '\a', '\x3', '\x2', '\x2', '\x2', ')', 
		'*', '\a', '\a', '\x2', '\x2', '*', '/', '\x5', '\n', '\x6', '\x2', '+', 
		',', '\a', '\x4', '\x2', '\x2', ',', '.', '\x5', '\n', '\x6', '\x2', '-', 
		'+', '\x3', '\x2', '\x2', '\x2', '.', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'/', '-', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x32', '\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x33', '\a', '\b', '\x2', '\x2', '\x33', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\a', '\a', '\x2', 
		'\x2', '\x35', '\x37', '\a', '\b', '\x2', '\x2', '\x36', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x37', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x41', '\a', '\x11', '\x2', '\x2', 
		'\x39', '\x41', '\a', '\x12', '\x2', '\x2', ':', '\x41', '\x5', '\x4', 
		'\x3', '\x2', ';', '\x41', '\x5', '\b', '\x5', '\x2', '<', '\x41', '\a', 
		'\xE', '\x2', '\x2', '=', '\x41', '\a', '\xF', '\x2', '\x2', '>', '\x41', 
		'\a', '\x10', '\x2', '\x2', '?', '\x41', '\x5', '\f', '\a', '\x2', '@', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '@', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '@', ':', '\x3', '\x2', '\x2', '\x2', '@', ';', '\x3', '\x2', '\x2', 
		'\x2', '@', '<', '\x3', '\x2', '\x2', '\x2', '@', '=', '\x3', '\x2', '\x2', 
		'\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', '@', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\v', '\x3', '\x2', '\x2', '\x2', '\x42', '\x44', '\a', 
		'\x14', '\x2', '\x2', '\x43', '\x45', '\x5', '\xE', '\b', '\x2', '\x44', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x45', 'O', '\x3', '\x2', '\x2', '\x2', '\x46', 'H', '\a', '\x15', 
		'\x2', '\x2', 'G', 'I', '\x5', '\xE', '\b', '\x2', 'H', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'L', '\a', '\x16', '\x2', '\x2', 'K', 'M', '\x5', '\xE', 
		'\b', '\x2', 'L', 'K', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'O', '\x3', '\x2', '\x2', '\x2', 'N', '\x42', '\x3', 
		'\x2', '\x2', '\x2', 'N', '\x46', '\x3', '\x2', '\x2', '\x2', 'N', 'J', 
		'\x3', '\x2', '\x2', '\x2', 'O', '\r', '\x3', '\x2', '\x2', '\x2', 'P', 
		'Q', '\a', '\t', '\x2', '\x2', 'Q', 'S', '\a', '\x17', '\x2', '\x2', 'R', 
		'T', '\x5', '\x10', '\t', '\x2', 'S', 'R', '\x3', '\x2', '\x2', '\x2', 
		'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\x3', '\x2', '\x2', '\x2', 
		'U', 'W', '\x5', '\xE', '\b', '\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 
		'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', 'h', '\x3', '\x2', '\x2', '\x2', 
		'X', 'Y', '\a', '\n', '\x2', '\x2', 'Y', 'Z', '\a', '\x17', '\x2', '\x2', 
		'Z', '\\', '\a', '\v', '\x2', '\x2', '[', ']', '\x5', '\x10', '\t', '\x2', 
		'\\', '[', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', 
		'\x2', ']', '_', '\x3', '\x2', '\x2', '\x2', '^', '`', '\x5', '\xE', '\b', 
		'\x2', '_', '^', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', 
		'\x2', '`', 'h', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\a', '\a', 
		'\x2', '\x2', '\x62', '\x63', '\a', '\x12', '\x2', '\x2', '\x63', '\x65', 
		'\a', '\b', '\x2', '\x2', '\x64', '\x66', '\x5', '\xE', '\b', '\x2', '\x65', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'h', '\x3', '\x2', '\x2', '\x2', 'g', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'g', 'X', '\x3', '\x2', '\x2', '\x2', 'g', '\x61', '\x3', 
		'\x2', '\x2', '\x2', 'h', '\xF', '\x3', '\x2', '\x2', '\x2', 'i', 'j', 
		'\a', '\f', '\x2', '\x2', 'j', 'k', '\x5', '\x12', '\n', '\x2', 'k', 'l', 
		'\a', '\r', '\x2', '\x2', 'l', '\x11', '\x3', '\x2', '\x2', '\x2', 'm', 
		'n', '\x5', '\n', '\x6', '\x2', 'n', 'o', '\a', '\x18', '\x2', '\x2', 
		'o', 'p', '\x5', '\n', '\x6', '\x2', 'p', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x11', '\x1C', '#', '/', '\x36', '@', '\x44', 'H', 'L', 'N', 'S', 
		'V', '\\', '_', '\x65', 'g',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace JsonLT.Parser
