//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ..\parser\JsonLT.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace JsonLT.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class JsonLTParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, TRUE=23, FALSE=24, NULL=25, 
		STRING=26, NUMBER=27, WS=28, ROOT=29, CURRENT=30, TAG=31, NODENAME=32;
	public const int
		RULE_json = 0, RULE_obj = 1, RULE_member = 2, RULE_array = 3, RULE_elements = 4, 
		RULE_element = 5, RULE_path = 6, RULE_subpath = 7, RULE_foreach = 8, RULE_concatenation = 9, 
		RULE_condition = 10, RULE_expresion = 11;
	public static readonly string[] ruleNames = {
		"json", "obj", "member", "array", "elements", "element", "path", "subpath", 
		"foreach", "concatenation", "condition", "expresion"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "','", "'}'", "':'", "'['", "']'", "'.'", "'[''", "'']'", 
		"'('", "')'", "'+'", "'[?('", "')]'", "'*'", "'/'", "'-'", "'<'", "'>'", 
		"'='", "'and'", "'or'", "'true'", "'false'", "'null'", null, null, null, 
		"'$'", "'@'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "TRUE", 
		"FALSE", "NULL", "STRING", "NUMBER", "WS", "ROOT", "CURRENT", "TAG", "NODENAME"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JsonLT.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JsonLTParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JsonLTParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JsonLTParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class JsonContext : ParserRuleContext {
		public ElementsContext elements() {
			return GetRuleContext<ElementsContext>(0);
		}
		public JsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterJson(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitJson(this);
		}
	}

	[RuleVersion(0)]
	public JsonContext json() {
		JsonContext _localctx = new JsonContext(Context, State);
		EnterRule(_localctx, 0, RULE_json);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterObj(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitObj(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 2, RULE_obj);
		int _la;
		try {
			State = 39;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 26; Match(T__0);
				State = 27; member();
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 28; Match(T__1);
					State = 29; member();
					}
					}
					State = 34;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 35; Match(T__2);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; Match(T__0);
				State = 38; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsonLTParser.STRING, 0); }
		public ElementsContext elements() {
			return GetRuleContext<ElementsContext>(0);
		}
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitMember(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 4, RULE_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; Match(STRING);
			State = 42; Match(T__3);
			State = 43; elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ElementsContext[] elements() {
			return GetRuleContexts<ElementsContext>();
		}
		public ElementsContext elements(int i) {
			return GetRuleContext<ElementsContext>(i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 6, RULE_array);
		int _la;
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45; Match(T__4);
				State = 46; elements();
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 47; Match(T__1);
					State = 48; elements();
					}
					}
					State = 53;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 54; Match(T__5);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 56; Match(T__4);
				State = 57; Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementsContext : ParserRuleContext {
		public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public ElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitElements(this);
		}
	}

	[RuleVersion(0)]
	public ElementsContext elements() {
		ElementsContext _localctx = new ElementsContext(Context, State);
		EnterRule(_localctx, 8, RULE_elements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; element();
			State = 64;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 61; element();
					}
					} 
				}
				State = 66;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsonLTParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(JsonLTParser.NUMBER, 0); }
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ITerminalNode TRUE() { return GetToken(JsonLTParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(JsonLTParser.FALSE, 0); }
		public ITerminalNode NULL() { return GetToken(JsonLTParser.NULL, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 10, RULE_element);
		try {
			State = 75;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 67; Match(STRING);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 68; Match(NUMBER);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 3);
				{
				State = 69; obj();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 70; array();
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 71; Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 72; Match(FALSE);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 73; Match(NULL);
				}
				break;
			case ROOT:
			case CURRENT:
			case TAG:
				EnterOuterAlt(_localctx, 8);
				{
				State = 74; path();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathContext : ParserRuleContext {
		public ITerminalNode ROOT() { return GetToken(JsonLTParser.ROOT, 0); }
		public SubpathContext subpath() {
			return GetRuleContext<SubpathContext>(0);
		}
		public ITerminalNode CURRENT() { return GetToken(JsonLTParser.CURRENT, 0); }
		public ITerminalNode TAG() { return GetToken(JsonLTParser.TAG, 0); }
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterPath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitPath(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		PathContext _localctx = new PathContext(Context, State);
		EnterRule(_localctx, 12, RULE_path);
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ROOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77; Match(ROOT);
				State = 79;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 78; subpath();
					}
					break;
				}
				}
				break;
			case CURRENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 81; Match(CURRENT);
				State = 83;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 82; subpath();
					}
					break;
				}
				}
				break;
			case TAG:
				EnterOuterAlt(_localctx, 3);
				{
				State = 85; Match(TAG);
				State = 87;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 86; subpath();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubpathContext : ParserRuleContext {
		public ITerminalNode NODENAME() { return GetToken(JsonLTParser.NODENAME, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public SubpathContext subpath() {
			return GetRuleContext<SubpathContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(JsonLTParser.NUMBER, 0); }
		public ForeachContext @foreach() {
			return GetRuleContext<ForeachContext>(0);
		}
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public SubpathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpath; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterSubpath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitSubpath(this);
		}
	}

	[RuleVersion(0)]
	public SubpathContext subpath() {
		SubpathContext _localctx = new SubpathContext(Context, State);
		EnterRule(_localctx, 14, RULE_subpath);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91; Match(T__6);
				State = 92; Match(NODENAME);
				State = 94;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 93; condition();
					}
					break;
				}
				State = 97;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 96; subpath();
					}
					break;
				}
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99; Match(T__7);
				State = 100; Match(NODENAME);
				State = 101; Match(T__8);
				State = 103;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 102; condition();
					}
					break;
				}
				State = 106;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 105; subpath();
					}
					break;
				}
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 108; Match(T__4);
				State = 109; Match(NUMBER);
				State = 110; Match(T__5);
				State = 112;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 111; subpath();
					}
					break;
				}
				}
				break;
			case T__9:
			case TAG:
				EnterOuterAlt(_localctx, 4);
				{
				State = 114; @foreach();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 5);
				{
				State = 115; concatenation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachContext : ParserRuleContext {
		public ITerminalNode TAG() { return GetToken(JsonLTParser.TAG, 0); }
		public ElementsContext elements() {
			return GetRuleContext<ElementsContext>(0);
		}
		public ForeachContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreach; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterForeach(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitForeach(this);
		}
	}

	[RuleVersion(0)]
	public ForeachContext @foreach() {
		ForeachContext _localctx = new ForeachContext(Context, State);
		EnterRule(_localctx, 16, RULE_foreach);
		try {
			State = 127;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TAG:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118; Match(TAG);
				State = 119; Match(T__9);
				State = 120; elements();
				State = 121; Match(T__10);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123; Match(T__9);
				State = 124; elements();
				State = 125; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatenationContext : ParserRuleContext {
		public SubpathContext subpath() {
			return GetRuleContext<SubpathContext>(0);
		}
		public ConcatenationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatenation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterConcatenation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitConcatenation(this);
		}
	}

	[RuleVersion(0)]
	public ConcatenationContext concatenation() {
		ConcatenationContext _localctx = new ConcatenationContext(Context, State);
		EnterRule(_localctx, 18, RULE_concatenation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(T__11);
			State = 130; subpath();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 20, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(T__12);
			State = 133; expresion(0);
			State = 134; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpresionContext : ParserRuleContext {
		public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public ElementsContext elements() {
			return GetRuleContext<ElementsContext>(0);
		}
		public ExpresionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expresion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterExpresion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitExpresion(this);
		}
	}

	[RuleVersion(0)]
	public ExpresionContext expresion() {
		return expresion(0);
	}

	private ExpresionContext expresion(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpresionContext _localctx = new ExpresionContext(Context, _parentState);
		ExpresionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_expresion, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				{
				State = 137; Match(T__9);
				State = 138; expresion(0);
				State = 139; Match(T__10);
				}
				break;
			case T__0:
			case T__4:
			case TRUE:
			case FALSE:
			case NULL:
			case STRING:
			case NUMBER:
			case ROOT:
			case CURRENT:
			case TAG:
				{
				State = 141; elements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 158;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 156;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new ExpresionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 144;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 145;
						_la = TokenStream.LA(1);
						if ( !(_la==T__14 || _la==T__15) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 146; expresion(7);
						}
						break;
					case 2:
						{
						_localctx = new ExpresionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 147;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 148;
						_la = TokenStream.LA(1);
						if ( !(_la==T__11 || _la==T__16) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 149; expresion(6);
						}
						break;
					case 3:
						{
						_localctx = new ExpresionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 150;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 151;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 152; expresion(5);
						}
						break;
					case 4:
						{
						_localctx = new ExpresionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 153;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 154;
						_la = TokenStream.LA(1);
						if ( !(_la==T__20 || _la==T__21) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 155; expresion(4);
						}
						break;
					}
					} 
				}
				State = 160;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return expresion_sempred((ExpresionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expresion_sempred(ExpresionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\"', '\xA4', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'!', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '$', '\v', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '*', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x34', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x37', '\v', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '=', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x41', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', '\x44', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', 'N', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'R', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'V', '\n', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', 'Z', '\n', '\b', '\x5', '\b', '\\', '\n', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x61', '\n', '\t', 
		'\x3', '\t', '\x5', '\t', '\x64', '\n', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', 'j', '\n', '\t', '\x3', '\t', '\x5', 
		'\t', 'm', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', 's', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'w', 
		'\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'\x82', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x91', '\n', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\a', '\r', '\x9F', '\n', '\r', '\f', '\r', '\xE', 
		'\r', '\xA2', '\v', '\r', '\x3', '\r', '\x2', '\x3', '\x18', '\xE', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x2', '\x6', '\x3', '\x2', '\x11', '\x12', '\x4', '\x2', '\xE', 
		'\xE', '\x13', '\x13', '\x3', '\x2', '\x14', '\x16', '\x3', '\x2', '\x17', 
		'\x18', '\x2', '\xB7', '\x2', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x4', 
		')', '\x3', '\x2', '\x2', '\x2', '\x6', '+', '\x3', '\x2', '\x2', '\x2', 
		'\b', '<', '\x3', '\x2', '\x2', '\x2', '\n', '>', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'M', '\x3', '\x2', '\x2', '\x2', '\xE', '[', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'v', '\x3', '\x2', '\x2', '\x2', '\x12', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x86', '\x3', '\x2', '\x2', '\x2', '\x18', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x1B', '\x5', '\n', '\x6', '\x2', '\x1B', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\a', '\x3', '\x2', '\x2', 
		'\x1D', '\"', '\x5', '\x6', '\x4', '\x2', '\x1E', '\x1F', '\a', '\x4', 
		'\x2', '\x2', '\x1F', '!', '\x5', '\x6', '\x4', '\x2', ' ', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', '!', '$', '\x3', '\x2', '\x2', '\x2', '\"', ' ', 
		'\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', '\x2', '\x2', '#', 
		'%', '\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', '\x2', '\x2', '\x2', 
		'%', '&', '\a', '\x5', '\x2', '\x2', '&', '*', '\x3', '\x2', '\x2', '\x2', 
		'\'', '(', '\a', '\x3', '\x2', '\x2', '(', '*', '\a', '\x5', '\x2', '\x2', 
		')', '\x1C', '\x3', '\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', 
		'\x2', '*', '\x5', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', '\x1C', 
		'\x2', '\x2', ',', '-', '\a', '\x6', '\x2', '\x2', '-', '.', '\x5', '\n', 
		'\x6', '\x2', '.', '\a', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', 
		'\a', '\x2', '\x2', '\x30', '\x35', '\x5', '\n', '\x6', '\x2', '\x31', 
		'\x32', '\a', '\x4', '\x2', '\x2', '\x32', '\x34', '\x5', '\n', '\x6', 
		'\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x34', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\a', 
		'\b', '\x2', '\x2', '\x39', '=', '\x3', '\x2', '\x2', '\x2', ':', ';', 
		'\a', '\a', '\x2', '\x2', ';', '=', '\a', '\b', '\x2', '\x2', '<', '/', 
		'\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '=', 
		'\t', '\x3', '\x2', '\x2', '\x2', '>', '\x42', '\x5', '\f', '\a', '\x2', 
		'?', '\x41', '\x5', '\f', '\a', '\x2', '@', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x44', '\x3', '\x2', '\x2', '\x2', '\x42', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x45', 'N', '\a', '\x1C', '\x2', '\x2', '\x46', 'N', '\a', '\x1D', 
		'\x2', '\x2', 'G', 'N', '\x5', '\x4', '\x3', '\x2', 'H', 'N', '\x5', '\b', 
		'\x5', '\x2', 'I', 'N', '\a', '\x19', '\x2', '\x2', 'J', 'N', '\a', '\x1A', 
		'\x2', '\x2', 'K', 'N', '\a', '\x1B', '\x2', '\x2', 'L', 'N', '\x5', '\xE', 
		'\b', '\x2', 'M', '\x45', '\x3', '\x2', '\x2', '\x2', 'M', '\x46', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'G', '\x3', '\x2', '\x2', '\x2', 'M', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'I', '\x3', '\x2', '\x2', '\x2', 'M', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'N', '\r', '\x3', '\x2', '\x2', '\x2', 'O', 'Q', 
		'\a', '\x1F', '\x2', '\x2', 'P', 'R', '\x5', '\x10', '\t', '\x2', 'Q', 
		'P', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 
		'R', '\\', '\x3', '\x2', '\x2', '\x2', 'S', 'U', '\a', ' ', '\x2', '\x2', 
		'T', 'V', '\x5', '\x10', '\t', '\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', '\\', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'Y', '\a', '!', '\x2', '\x2', 'X', 'Z', '\x5', '\x10', '\t', 
		'\x2', 'Y', 'X', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '\\', '\x3', '\x2', '\x2', '\x2', '[', 'O', '\x3', '\x2', 
		'\x2', '\x2', '[', 'S', '\x3', '\x2', '\x2', '\x2', '[', 'W', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\xF', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', 
		'\t', '\x2', '\x2', '^', '`', '\a', '\"', '\x2', '\x2', '_', '\x61', '\x5', 
		'\x16', '\f', '\x2', '`', '_', '\x3', '\x2', '\x2', '\x2', '`', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x64', '\x5', '\x10', '\t', '\x2', '\x63', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', 'w', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', '\n', '\x2', '\x2', 
		'\x66', 'g', '\a', '\"', '\x2', '\x2', 'g', 'i', '\a', '\v', '\x2', '\x2', 
		'h', 'j', '\x5', '\x16', '\f', '\x2', 'i', 'h', '\x3', '\x2', '\x2', '\x2', 
		'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', 'l', '\x3', '\x2', '\x2', '\x2', 
		'k', 'm', '\x5', '\x10', '\t', '\x2', 'l', 'k', '\x3', '\x2', '\x2', '\x2', 
		'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', 'w', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\a', '\a', '\x2', '\x2', 'o', 'p', '\a', '\x1D', '\x2', '\x2', 
		'p', 'r', '\a', '\b', '\x2', '\x2', 'q', 's', '\x5', '\x10', '\t', '\x2', 
		'r', 'q', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 
		's', 'w', '\x3', '\x2', '\x2', '\x2', 't', 'w', '\x5', '\x12', '\n', '\x2', 
		'u', 'w', '\x5', '\x14', '\v', '\x2', 'v', ']', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x65', '\x3', '\x2', '\x2', '\x2', 'v', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'w', '\x11', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', '!', '\x2', 
		'\x2', 'y', 'z', '\a', '\f', '\x2', '\x2', 'z', '{', '\x5', '\n', '\x6', 
		'\x2', '{', '|', '\a', '\r', '\x2', '\x2', '|', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '}', '~', '\a', '\f', '\x2', '\x2', '~', '\x7F', '\x5', 
		'\n', '\x6', '\x2', '\x7F', '\x80', '\a', '\r', '\x2', '\x2', '\x80', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x81', 'x', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '}', '\x3', '\x2', '\x2', '\x2', '\x82', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x84', '\a', '\xE', '\x2', '\x2', '\x84', 
		'\x85', '\x5', '\x10', '\t', '\x2', '\x85', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x87', '\a', '\xF', '\x2', '\x2', '\x87', '\x88', '\x5', 
		'\x18', '\r', '\x2', '\x88', '\x89', '\a', '\x10', '\x2', '\x2', '\x89', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\b', '\r', '\x1', 
		'\x2', '\x8B', '\x8C', '\a', '\f', '\x2', '\x2', '\x8C', '\x8D', '\x5', 
		'\x18', '\r', '\x2', '\x8D', '\x8E', '\a', '\r', '\x2', '\x2', '\x8E', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x91', '\x5', '\n', '\x6', 
		'\x2', '\x90', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x93', '\f', '\b', '\x2', '\x2', '\x93', '\x94', '\t', '\x2', '\x2', 
		'\x2', '\x94', '\x9F', '\x5', '\x18', '\r', '\t', '\x95', '\x96', '\f', 
		'\a', '\x2', '\x2', '\x96', '\x97', '\t', '\x3', '\x2', '\x2', '\x97', 
		'\x9F', '\x5', '\x18', '\r', '\b', '\x98', '\x99', '\f', '\x6', '\x2', 
		'\x2', '\x99', '\x9A', '\t', '\x4', '\x2', '\x2', '\x9A', '\x9F', '\x5', 
		'\x18', '\r', '\a', '\x9B', '\x9C', '\f', '\x5', '\x2', '\x2', '\x9C', 
		'\x9D', '\t', '\x5', '\x2', '\x2', '\x9D', '\x9F', '\x5', '\x18', '\r', 
		'\x6', '\x9E', '\x92', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\xA1', '\x19', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\x16', '\"', ')', '\x35', '<', '\x42', 
		'M', 'Q', 'U', 'Y', '[', '`', '\x63', 'i', 'l', 'r', 'v', '\x81', '\x90', 
		'\x9E', '\xA0',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace JsonLT.Parser
