//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ..\parser\JsonLT.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace JsonLT.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class JsonLTParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, TRUE=23, FALSE=24, NULL=25, 
		STRING=26, NUMBER=27, WS=28, ROOT=29, CURRENT=30, TAG=31, NODENAME=32;
	public const int
		RULE_json = 0, RULE_obj = 1, RULE_member = 2, RULE_array = 3, RULE_elements = 4, 
		RULE_element = 5, RULE_path = 6, RULE_subpath = 7, RULE_condition = 8, 
		RULE_expresion = 9;
	public static readonly string[] ruleNames = {
		"json", "obj", "member", "array", "elements", "element", "path", "subpath", 
		"condition", "expresion"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "','", "'}'", "':'", "'['", "']'", "'.'", "'[''", "'']'", 
		"'[?('", "')]'", "'*'", "'/'", "'+'", "'-'", "'<'", "'>'", "'='", "'and'", 
		"'or'", "'('", "')'", "'true'", "'false'", "'null'", null, null, null, 
		"'$'", "'@'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "TRUE", 
		"FALSE", "NULL", "STRING", "NUMBER", "WS", "ROOT", "CURRENT", "TAG", "NODENAME"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JsonLT.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JsonLTParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JsonLTParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JsonLTParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class JsonContext : ParserRuleContext {
		public ElementsContext elements() {
			return GetRuleContext<ElementsContext>(0);
		}
		public JsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterJson(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitJson(this);
		}
	}

	[RuleVersion(0)]
	public JsonContext json() {
		JsonContext _localctx = new JsonContext(Context, State);
		EnterRule(_localctx, 0, RULE_json);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterObj(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitObj(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 2, RULE_obj);
		int _la;
		try {
			State = 35;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 22; Match(T__0);
				State = 23; member();
				State = 28;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 24; Match(T__1);
					State = 25; member();
					}
					}
					State = 30;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 31; Match(T__2);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 33; Match(T__0);
				State = 34; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsonLTParser.STRING, 0); }
		public ElementsContext elements() {
			return GetRuleContext<ElementsContext>(0);
		}
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitMember(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 4, RULE_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; Match(STRING);
			State = 38; Match(T__3);
			State = 39; elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ElementsContext[] elements() {
			return GetRuleContexts<ElementsContext>();
		}
		public ElementsContext elements(int i) {
			return GetRuleContext<ElementsContext>(i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 6, RULE_array);
		int _la;
		try {
			State = 54;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 41; Match(T__4);
				State = 42; elements();
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 43; Match(T__1);
					State = 44; elements();
					}
					}
					State = 49;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 50; Match(T__5);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 52; Match(T__4);
				State = 53; Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementsContext : ParserRuleContext {
		public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public ElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitElements(this);
		}
	}

	[RuleVersion(0)]
	public ElementsContext elements() {
		ElementsContext _localctx = new ElementsContext(Context, State);
		EnterRule(_localctx, 8, RULE_elements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; element();
			State = 60;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 57; element();
					}
					} 
				}
				State = 62;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsonLTParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(JsonLTParser.NUMBER, 0); }
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ITerminalNode TRUE() { return GetToken(JsonLTParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(JsonLTParser.FALSE, 0); }
		public ITerminalNode NULL() { return GetToken(JsonLTParser.NULL, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 10, RULE_element);
		try {
			State = 71;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 63; Match(STRING);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64; Match(NUMBER);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 3);
				{
				State = 65; obj();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 66; array();
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 67; Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 68; Match(FALSE);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 69; Match(NULL);
				}
				break;
			case ROOT:
			case CURRENT:
			case TAG:
				EnterOuterAlt(_localctx, 8);
				{
				State = 70; path();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathContext : ParserRuleContext {
		public ITerminalNode ROOT() { return GetToken(JsonLTParser.ROOT, 0); }
		public SubpathContext subpath() {
			return GetRuleContext<SubpathContext>(0);
		}
		public ITerminalNode CURRENT() { return GetToken(JsonLTParser.CURRENT, 0); }
		public ITerminalNode TAG() { return GetToken(JsonLTParser.TAG, 0); }
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterPath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitPath(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		PathContext _localctx = new PathContext(Context, State);
		EnterRule(_localctx, 12, RULE_path);
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ROOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 73; Match(ROOT);
				State = 75;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 74; subpath();
					}
					break;
				}
				}
				break;
			case CURRENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 77; Match(CURRENT);
				State = 79;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 78; subpath();
					}
					break;
				}
				}
				break;
			case TAG:
				EnterOuterAlt(_localctx, 3);
				{
				State = 81; Match(TAG);
				State = 83;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 82; subpath();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubpathContext : ParserRuleContext {
		public ITerminalNode NODENAME() { return GetToken(JsonLTParser.NODENAME, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public SubpathContext subpath() {
			return GetRuleContext<SubpathContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(JsonLTParser.NUMBER, 0); }
		public SubpathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpath; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterSubpath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitSubpath(this);
		}
	}

	[RuleVersion(0)]
	public SubpathContext subpath() {
		SubpathContext _localctx = new SubpathContext(Context, State);
		EnterRule(_localctx, 14, RULE_subpath);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87; Match(T__6);
				State = 88; Match(NODENAME);
				State = 90;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 89; condition();
					}
					break;
				}
				State = 93;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 92; subpath();
					}
					break;
				}
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95; Match(T__7);
				State = 96; Match(NODENAME);
				State = 97; Match(T__8);
				State = 99;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 98; condition();
					}
					break;
				}
				State = 102;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 101; subpath();
					}
					break;
				}
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 104; Match(T__4);
				State = 105; Match(NUMBER);
				State = 106; Match(T__5);
				State = 108;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 107; subpath();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 16, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(T__9);
			State = 113; expresion(0);
			State = 114; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpresionContext : ParserRuleContext {
		public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public ElementsContext elements() {
			return GetRuleContext<ElementsContext>(0);
		}
		public ExpresionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expresion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.EnterExpresion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJsonLTListener typedListener = listener as IJsonLTListener;
			if (typedListener != null) typedListener.ExitExpresion(this);
		}
	}

	[RuleVersion(0)]
	public ExpresionContext expresion() {
		return expresion(0);
	}

	private ExpresionContext expresion(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpresionContext _localctx = new ExpresionContext(Context, _parentState);
		ExpresionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expresion, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
				{
				State = 117; Match(T__20);
				State = 118; expresion(0);
				State = 119; Match(T__21);
				}
				break;
			case T__0:
			case T__4:
			case TRUE:
			case FALSE:
			case NULL:
			case STRING:
			case NUMBER:
			case ROOT:
			case CURRENT:
			case TAG:
				{
				State = 121; elements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 138;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 136;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
					case 1:
						{
						_localctx = new ExpresionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 124;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 125;
						_la = TokenStream.LA(1);
						if ( !(_la==T__11 || _la==T__12) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 126; expresion(7);
						}
						break;
					case 2:
						{
						_localctx = new ExpresionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 127;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 128;
						_la = TokenStream.LA(1);
						if ( !(_la==T__13 || _la==T__14) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 129; expresion(6);
						}
						break;
					case 3:
						{
						_localctx = new ExpresionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 130;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 131;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << T__16) | (1L << T__17))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 132; expresion(5);
						}
						break;
					case 4:
						{
						_localctx = new ExpresionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 133;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 134;
						_la = TokenStream.LA(1);
						if ( !(_la==T__18 || _la==T__19) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 135; expresion(4);
						}
						break;
					}
					} 
				}
				State = 140;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expresion_sempred((ExpresionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expresion_sempred(ExpresionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\"', '\x90', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '\x1D', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		' ', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '&', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\a', '\x5', '\x30', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x33', '\v', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x39', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '=', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '@', '\v', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', 'J', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', 'N', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'R', 
		'\n', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'V', '\n', '\b', '\x5', 
		'\b', 'X', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		']', '\n', '\t', '\x3', '\t', '\x5', '\t', '`', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x66', '\n', '\t', 
		'\x3', '\t', '\x5', '\t', 'i', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', 'o', '\n', '\t', '\x5', '\t', 'q', '\n', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', '}', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x8B', '\n', '\v', '\f', 
		'\v', '\xE', '\v', '\x8E', '\v', '\v', '\x3', '\v', '\x2', '\x3', '\x14', 
		'\f', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x2', '\x6', '\x3', '\x2', '\xE', '\xF', '\x3', '\x2', '\x10', '\x11', 
		'\x3', '\x2', '\x12', '\x14', '\x3', '\x2', '\x15', '\x16', '\x2', '\xA2', 
		'\x2', '\x16', '\x3', '\x2', '\x2', '\x2', '\x4', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\'', '\x3', '\x2', '\x2', '\x2', '\b', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\n', ':', '\x3', '\x2', '\x2', '\x2', '\f', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'W', '\x3', '\x2', '\x2', '\x2', '\x10', 'p', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'r', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'|', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\x5', '\n', '\x6', '\x2', 
		'\x17', '\x3', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\a', '\x3', 
		'\x2', '\x2', '\x19', '\x1E', '\x5', '\x6', '\x4', '\x2', '\x1A', '\x1B', 
		'\a', '\x4', '\x2', '\x2', '\x1B', '\x1D', '\x5', '\x6', '\x4', '\x2', 
		'\x1C', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1D', ' ', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', '!', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\a', '\x5', '\x2', '\x2', 
		'\"', '&', '\x3', '\x2', '\x2', '\x2', '#', '$', '\a', '\x3', '\x2', '\x2', 
		'$', '&', '\a', '\x5', '\x2', '\x2', '%', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '&', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\'', '(', '\a', '\x1C', '\x2', '\x2', '(', ')', '\a', '\x6', 
		'\x2', '\x2', ')', '*', '\x5', '\n', '\x6', '\x2', '*', '\a', '\x3', '\x2', 
		'\x2', '\x2', '+', ',', '\a', '\a', '\x2', '\x2', ',', '\x31', '\x5', 
		'\n', '\x6', '\x2', '-', '.', '\a', '\x4', '\x2', '\x2', '.', '\x30', 
		'\x5', '\n', '\x6', '\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x35', '\a', '\b', '\x2', '\x2', '\x35', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x37', '\a', '\a', '\x2', '\x2', '\x37', '\x39', '\a', 
		'\b', '\x2', '\x2', '\x38', '+', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\x39', '\t', '\x3', '\x2', '\x2', '\x2', 
		':', '>', '\x5', '\f', '\a', '\x2', ';', '=', '\x5', '\f', '\a', '\x2', 
		'<', ';', '\x3', '\x2', '\x2', '\x2', '=', '@', '\x3', '\x2', '\x2', '\x2', 
		'>', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', 
		'?', '\v', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', 
		'\x2', '\x41', 'J', '\a', '\x1C', '\x2', '\x2', '\x42', 'J', '\a', '\x1D', 
		'\x2', '\x2', '\x43', 'J', '\x5', '\x4', '\x3', '\x2', '\x44', 'J', '\x5', 
		'\b', '\x5', '\x2', '\x45', 'J', '\a', '\x19', '\x2', '\x2', '\x46', 'J', 
		'\a', '\x1A', '\x2', '\x2', 'G', 'J', '\a', '\x1B', '\x2', '\x2', 'H', 
		'J', '\x5', '\xE', '\b', '\x2', 'I', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'I', '\x42', '\x3', '\x2', '\x2', '\x2', 'I', '\x43', '\x3', '\x2', '\x2', 
		'\x2', 'I', '\x44', '\x3', '\x2', '\x2', '\x2', 'I', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'I', '\x46', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'H', '\x3', '\x2', '\x2', '\x2', 'J', '\r', 
		'\x3', '\x2', '\x2', '\x2', 'K', 'M', '\a', '\x1F', '\x2', '\x2', 'L', 
		'N', '\x5', '\x10', '\t', '\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'X', '\x3', '\x2', '\x2', '\x2', 
		'O', 'Q', '\a', ' ', '\x2', '\x2', 'P', 'R', '\x5', '\x10', '\t', '\x2', 
		'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 
		'R', 'X', '\x3', '\x2', '\x2', '\x2', 'S', 'U', '\a', '!', '\x2', '\x2', 
		'T', 'V', '\x5', '\x10', '\t', '\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'X', '\x3', '\x2', '\x2', '\x2', 
		'W', 'K', '\x3', '\x2', '\x2', '\x2', 'W', 'O', '\x3', '\x2', '\x2', '\x2', 
		'W', 'S', '\x3', '\x2', '\x2', '\x2', 'X', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\a', '\t', '\x2', '\x2', 'Z', '\\', '\a', '\"', '\x2', 
		'\x2', '[', ']', '\x5', '\x12', '\n', '\x2', '\\', '[', '\x3', '\x2', 
		'\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '_', '\x3', 
		'\x2', '\x2', '\x2', '^', '`', '\x5', '\x10', '\t', '\x2', '_', '^', '\x3', 
		'\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', 'q', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '\x62', '\a', '\n', '\x2', '\x2', '\x62', 
		'\x63', '\a', '\"', '\x2', '\x2', '\x63', '\x65', '\a', '\v', '\x2', '\x2', 
		'\x64', '\x66', '\x5', '\x12', '\n', '\x2', '\x65', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 'h', 
		'\x3', '\x2', '\x2', '\x2', 'g', 'i', '\x5', '\x10', '\t', '\x2', 'h', 
		'g', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 
		'i', 'q', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', '\a', '\x2', '\x2', 
		'k', 'l', '\a', '\x1D', '\x2', '\x2', 'l', 'n', '\a', '\b', '\x2', '\x2', 
		'm', 'o', '\x5', '\x10', '\t', '\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', 'q', '\x3', '\x2', '\x2', '\x2', 
		'p', 'Y', '\x3', '\x2', '\x2', '\x2', 'p', '\x61', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'j', '\x3', '\x2', '\x2', '\x2', 'q', '\x11', '\x3', '\x2', 
		'\x2', '\x2', 'r', 's', '\a', '\f', '\x2', '\x2', 's', 't', '\x5', '\x14', 
		'\v', '\x2', 't', 'u', '\a', '\r', '\x2', '\x2', 'u', '\x13', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'w', '\b', '\v', '\x1', '\x2', 'w', 'x', '\a', '\x17', 
		'\x2', '\x2', 'x', 'y', '\x5', '\x14', '\v', '\x2', 'y', 'z', '\a', '\x18', 
		'\x2', '\x2', 'z', '}', '\x3', '\x2', '\x2', '\x2', '{', '}', '\x5', '\n', 
		'\x6', '\x2', '|', 'v', '\x3', '\x2', '\x2', '\x2', '|', '{', '\x3', '\x2', 
		'\x2', '\x2', '}', '\x8C', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\f', 
		'\b', '\x2', '\x2', '\x7F', '\x80', '\t', '\x2', '\x2', '\x2', '\x80', 
		'\x8B', '\x5', '\x14', '\v', '\t', '\x81', '\x82', '\f', '\a', '\x2', 
		'\x2', '\x82', '\x83', '\t', '\x3', '\x2', '\x2', '\x83', '\x8B', '\x5', 
		'\x14', '\v', '\b', '\x84', '\x85', '\f', '\x6', '\x2', '\x2', '\x85', 
		'\x86', '\t', '\x4', '\x2', '\x2', '\x86', '\x8B', '\x5', '\x14', '\v', 
		'\a', '\x87', '\x88', '\f', '\x5', '\x2', '\x2', '\x88', '\x89', '\t', 
		'\x5', '\x2', '\x2', '\x89', '\x8B', '\x5', '\x14', '\v', '\x6', '\x8A', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x84', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x15', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x1E', '%', '\x31', '\x38', '>', 'I', 'M', 
		'Q', 'U', 'W', '\\', '_', '\x65', 'h', 'n', 'p', '|', '\x8A', '\x8C',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace JsonLT.Parser
